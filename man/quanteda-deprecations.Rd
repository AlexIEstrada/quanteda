% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/quanteda-documentation.R
\name{quanteda-deprecations}
\alias{quanteda-deprecations}
\title{quanteda deprecations}
\description{
Details on major changes in \pkg{quanteda} version 3, including breaking
changes.
}
\section{Behaviour changes}{

\itemize{
\item Non-standard evaluation for \code{by}, in \code{\link[=corpus_sample]{corpus_sample()}}, \code{\link[=tokens_sample]{tokens_sample()}},
and \code{\link[=dfm_sample]{dfm_sample()}}. The \code{by} argument is now evaluated within the docvars
data.frame of the object, so that docvar columns may be specified unquoted.
Prior to v3, \code{by} took quoted docvar names, including "document" as a
shortcut to \verb{[docid()]}.  These are now evaluated literally and hence cannot
refer to docvar columns or the docid of the object.
}
}

\section{Deprecations and removals in quanteda v3}{

The main user-facing changes in version 3 relate to the
deprecation or elimination of shortcut steps that allowed functions that
required tokens inputs to skip the tokens creation step.  We did this to
require users to take more direct control of tokenization options, or to
substitute the alternative tokeniser of their choice (and then coercing it to
tokens via \code{\link[=as.tokens]{as.tokens()}}).  This also allows our function behaviour to be
more consistent, with each function performing a single task, rather than
combining functions (such as tokenisation \emph{and} constructing a matrix).

The most common example involves constructing a \link{dfm} directly from a
character or corpus object.  Formerly, this would construct a \link{tokens} object
internally before creating the dfm, and allowed passing arguments to
\code{\link[=tokens]{tokens()}} via \code{...}.  This is now deprecated, although still functional with
a warning.

We strongly encourage either creating a \link{tokens} object first, or piping the
tokens return to \code{\link[=dfm]{dfm()}} using \verb{\%>}.  (See examples below.)

We have also deprecated direct character or corpus inputs to \code{\link[=kwic]{kwic()}}, since
this also requires a tokenised input.

The full list of deprecations:
\itemize{
\item \code{dfm_sample(x, margins = "features")} is deprecated; future versions will
not support sampling on features using \code{dfm_sample()}.
\item \code{dfm.character()} and \code{dfm.corpus()} are deprecated.  Users should create a
tokens object first, and input that to \code{dfm()}.
\item \code{dfm()}: As of version 3, only tokens objects are supported as inputs to
\code{dfm()}.  Calling \code{dfm()} for character or corpus objects is still
functional, but issues a warning.  Convenience passing of arguments to
\code{tokens()} via \code{...} for \code{dfm()} is also deprecated, but undocumented, and
functions only with a warning.  Users should now create a tokens object
(using \code{tokens()} from character or corpus inputs before calling \code{dfm()}.
\item \code{kwic()}: As of version 3, only tokens objects are supported as inputs to
\code{kwic()}.  Calling \code{kwic()} for character or corpus objects is still
functional, but issues a warning.  Passing arguments to \code{tokens()} via \code{...}
in \code{kwic()} is now disabled.  Users should now create a tokens object (using
\code{tokens()} from character or corpus inputs before calling \code{kwic()}.
\item Shortcut arguments to \code{dfm()} are now deprecated.  These are still active,
with a warning, although they are no longer documented.  These are:
\itemize{
\item \code{stem} -- use \code{\link[=tokens_wordstem]{tokens_wordstem()}} or \code{\link[=dfm_wordstem]{dfm_wordstem()}} instead.
\item \code{select}/\code{remove} -- use \code{\link[=tokens_select]{tokens_select()}} / \code{\link[=tokens_remove]{tokens_remove()}}, or
\code{\link[=dfm_select]{dfm_select()}} / \code{\link[=dfm_remove]{dfm_remove()}} instead
\item \code{dictionary}, \code{thesaurus} -- use \code{\link[=tokens_lookup]{tokens_lookup()}} or \code{\link[=dfm_lookup]{dfm_lookup()}} instead.
\item \code{valuetype}, \code{case_insensitive} -- these are disabled; for the deprecated arguments that take these qualifiers, they are fixed to the defaults \code{"glob"} and \code{TRUE}.
\item \code{groups} -- use \code{\link[=tokens_group]{tokens_group()}} or \code{\link[=dfm_group]{dfm_group()}} instead.
}
}

The following functionality is removed in version 3:
\itemize{
\item The \verb{textplot_*()} and \verb{textstat_*()} functions.
\item The following functions have been removed:
\itemize{
\item all methods for defunct \code{corpuszip} objects.
\item \code{View()} functions
\item \code{as.wfm()} and \code{as.DocumentTermMatrix()} (the same functionality is available via \code{convert()})
\item \code{metadoc()} and \code{metacorpus()}
\item \code{corpus_trimsentences()} (replaced by \code{corpus_trim()})
\item all of the \code{tortl} functions
\item all legacy functions related to the ancient "corpuszip" corpus variant.
}
\item \code{dfm} objects can no longer be used as a \code{pattern} in \code{dfm_select()} (formerly deprecated).
}
}

\section{Moved to other packages}{

In version 3, we also completed a modularisation of the "quantedaverse"
packages begun with version 2. All \verb{textstat_*()} functions are now moved to
the \pkg{quanteda.textstats} package, and all \verb{textplot_*()} functions now
reside in the \pkg{quanteda.textplots} package.  (The \verb{textmodel_*()}
functions were moved to the \pkg{quanteda.textmodels} package with the
version 2 release.)
}

\examples{
# creating a dfm
txt <- c("This is a text example.", "With @usernames and #hashtag tokens.")
tokens(txt, remove_punct = TRUE) \%>\%
    dfm() \%>\%
    dfm_remove(pattern = c("@*", "#*"))
    
# keywords-in-context
data_corpus_inaugural[1:6] \%>\%
    tokens() \%>\%
    kwic(pattern = "secur*", window = 3)
}
